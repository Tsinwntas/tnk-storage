{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TnkDBConfig = exports.getTnkStoresMeta = exports.toDB = exports.DatabaseRecord = void 0;\nclass DatabaseRecord {\n  constructor(entity) {\n    this.databasekey = entity.databaseKey;\n    this.entity = entity.saveEntity();\n  }\n}\nexports.DatabaseRecord = DatabaseRecord;\n/**\r\n* You should never have to call this yourself. It is called during storage to set the entities in the format the DB expects.\r\n* @param entity The entity that will be saved.\r\n*/\nfunction toDB(entity) {\n  return new DatabaseRecord(entity);\n}\nexports.toDB = toDB;\n/**\r\n* Since we only save one time of table in this database, I provide with an easy way to implement them in the schema.\r\n* If there is ever a functionality for dynamic creation of objectstores, then this will become deprecated. Until then\r\n* it is unfortunatelly a necessity.\r\n* @param tableName The name of the objectStore to create.\r\n*/\nfunction getTnkStoresMeta(tableName) {\n  return {\n    store: tableName,\n    storeConfig: {\n      keyPath: 'databasekey',\n      autoIncrement: false\n    },\n    storeSchema: [{\n      name: 'databasekey',\n      keypath: 'databasekey',\n      options: {\n        unique: true\n      }\n    }, {\n      name: 'entity',\n      keypath: 'entity',\n      options: {\n        unique: false\n      }\n    }]\n  };\n}\nexports.getTnkStoresMeta = getTnkStoresMeta;\nclass TnkDBConfig {\n  /**\r\n   * Simplified version of creating a DBConfig that works with this storage implementation.\r\n   * Adds by default a 'user' table to keep the user of the device and the preferences.\r\n   * @param name Name of the object store\r\n   * @param version Version number of the DB\r\n   * @param migrationFactory (Optional) Ahead of time compiles requires an exported function for factories\r\n   */\n  constructor(name, version, migrationFactory) {\n    this.name = name;\n    this.version = version;\n    this.migrationFactory = migrationFactory;\n    this.objectStoresMeta = [];\n    this.addUserStore();\n  }\n  addUserStore() {\n    return this.addObjectStoreSimple('user');\n  }\n  addObjectStores(tableName, addInstance, addMock) {\n    this.objectStoresMeta = this.objectStoresMeta.concat(getTnkStoresMeta(tableName));\n    if (addInstance) this.objectStoresMeta = this.objectStoresMeta.concat(getTnkStoresMeta(\"instance\" + tableName));\n    if (addMock) this.objectStoresMeta = this.objectStoresMeta.concat(getTnkStoresMeta(\"mock\" + tableName));\n    return this;\n  }\n  /**\r\n   * Creates an object store for the name provided plus both the instance and mock table for this store.\r\n   * @param tableName The name of the object store\r\n   * @returns Self\r\n   */\n  addObjectStore(tableName) {\n    return this.addObjectStores(tableName, true, true);\n  }\n  /**\r\n   * Creates an object store for the name provided plus mock table for this store only.\r\n   * @param tableName The name of the object store\r\n   * @returns Self\r\n   */\n  addObjectStoreWithoutInstance(tableName) {\n    return this.addObjectStores(tableName, false, true);\n  }\n  /**\r\n   * Creates an object store for the name provided plus instance table for this store only.\r\n   * @param tableName The name of the object store\r\n   * @returns Self\r\n   */\n  addObjectStoreWithoutMock(tableName) {\n    return this.addObjectStores(tableName, true, false);\n  }\n  /**\r\n   * Creates an object store for the name provided without the instance and mock table.\r\n   * @param tableName The name of the object store\r\n   * @returns Self\r\n   */\n  addObjectStoreSimple(tableName) {\n    return this.addObjectStores(tableName, false, false);\n  }\n}\nexports.TnkDBConfig = TnkDBConfig;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}