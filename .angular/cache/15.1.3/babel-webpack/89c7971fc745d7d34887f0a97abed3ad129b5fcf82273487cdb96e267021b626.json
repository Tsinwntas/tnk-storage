{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTnkStoresMeta = exports.toDB = exports.DatabaseRecord = void 0;\nclass DatabaseRecord {\n  constructor(entity) {\n    this.databasekey = entity.databaseKey;\n    this.entity = entity.saveEntity();\n  }\n}\nexports.DatabaseRecord = DatabaseRecord;\n/**\r\n* You should never have to call this yourself. It is called during storage to set the entities in the format the DB expects.\r\n* @param entity The entity that will be saved.\r\n*/\nfunction toDB(entity) {\n  return new DatabaseRecord(entity);\n}\nexports.toDB = toDB;\n/**\r\n* Since we only save one time of table in this database, I provide with an easy way to implement them in the schema.\r\n* If there is ever a functionality for dynamic creation of objectstores, then this will become deprecated. Until then\r\n* it is unfortunatelly a necessity.\r\n* @param tableName The name of the objectStore to create.\r\n*/\nfunction getTnkStoresMeta(tableName) {\n  return {\n    store: tableName,\n    storeConfig: {\n      keyPath: 'databasekey',\n      autoIncrement: false\n    },\n    storeSchema: [{\n      name: 'databasekey',\n      keypath: 'databasekey',\n      options: {\n        unique: true\n      }\n    }, {\n      name: 'entity',\n      keypath: 'entity',\n      options: {\n        unique: false\n      }\n    }]\n  };\n}\nexports.getTnkStoresMeta = getTnkStoresMeta;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}