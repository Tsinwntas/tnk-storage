{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"E:/workspace/GitHub/MyModules/tnk-storage/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TnkStorage = void 0;\nconst database_record_1 = require(\"./database-record\");\nconst i0 = require(\"@angular/core\");\nconst i1 = require(\"ngx-indexed-db\");\nclass TnkStorage {\n  constructor(dbService) {\n    this.dbService = dbService;\n    TnkStorage['DB'] = this;\n  }\n  getUser() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield _this.getAll(\"user\")[0];\n    })();\n  }\n  updateUser(user) {\n    this.dbService.update(\"user\", (0, database_record_1.toDB)(user)).subscribe(data => console.log(\"update user:\" + data));\n  }\n  isOwner(owner) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (!owner) return true;\n      return (yield _this2.getUser()).databaseKey == owner;\n    })();\n  }\n  create(entity) {\n    this.dbService.add(entity.getTableName(), (0, database_record_1.toDB)(entity)).subscribe(key => console.log(\"key:\", key));\n  }\n  //Create Batch causes problems, avoid if possible, or use for small batches. Remember to subscribe to it or it will not do its job.\n  createBatch(table, entities) {\n    return this.dbService.bulkAdd(table, entities.map(e => (0, database_record_1.toDB)(e)));\n  }\n  getByEntity(entity) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this3.get(entity.getTableName(), entity.databaseKey);\n    })();\n  }\n  getFiltered(table, condition, returnKeys) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const results = [];\n        _this4.dbService.getAll(table).subscribe(data => {\n          data.forEach(d => {\n            if (condition(d.entity)) results.push(returnKeys ? d.databasekey : d.entity);\n          });\n          resolve(results);\n        });\n      });\n    })();\n  }\n  getAll(table, returnKeys) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      return yield _this5.getFiltered(table, data => true, returnKeys);\n    })();\n  }\n  get(table, databaseKey) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.dbService.getByKey(table, databaseKey).subscribe(data => {\n          console.log(\"data:\", data);\n          if (!data) return resolve(data);\n          return resolve(data.entity);\n        });\n      } catch (e) {\n        console.log(e);\n        reject();\n      }\n    });\n  }\n  set(entity) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        getOrCreateObjectStore(entity.getTableName()).then(() => {});\n        _this6.dbService.createObjectStore();\n        _this6.dbService.update(entity.getTableName(), (0, database_record_1.toDB)(entity)).subscribe(key => {\n          return resolve(key);\n        });\n      });\n    })();\n  }\n  delete(entity) {\n    this.dbService.delete(entity.getTableName(), entity.databaseKey).subscribe(data => console.log(\"delete: \" + data));\n  }\n  deleteKeys(table, keys) {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this7.dbService.bulkDelete(table, keys).subscribe(result => {\n          console.log('result: ', result);\n          return resolve(result);\n        });\n      });\n    })();\n  }\n  deleteAll(tables) {\n    tables.forEach(table => this.dbService.deleteObjectStore(table).subscribe(data => console.log(\"deleted:\", data)));\n  }\n  getOrCreateObjectStore(store) {\n    return new Promise((resolve, reject) => {\n      const storeSchema = {\n        store: store,\n        storeConfig: {\n          keyPath: 'databasekey',\n          autoIncrement: false\n        },\n        storeSchema: [{\n          name: 'databasekey',\n          keypath: 'databasekey',\n          options: {\n            unique: true\n          }\n        }, {\n          name: 'entity',\n          keypath: 'entity',\n          options: {\n            unique: false\n          }\n        }]\n      };\n      this.dbService.createObjectStore(storeSchema);\n      resolve(true);\n    });\n  }\n}\nexports.TnkStorage = TnkStorage;\nTnkStorage.ɵfac = function TnkStorage_Factory(t) {\n  return new (t || TnkStorage)(i0.ɵɵinject(i1.NgxIndexedDBService));\n};\nTnkStorage.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TnkStorage,\n  factory: TnkStorage.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}